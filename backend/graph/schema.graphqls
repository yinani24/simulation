# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User{
  _id: ID!
  matrixID: ID!
  username: String!
  email: String!
  password: String!
  current_balance: Float!
}

type Matrix{
  _id: ID!
  name: String!
}

type Admin{
  _id: ID!
  matrixID: ID!
  username: String!
  email: String!
  password: String!
  privilidge: Boolean!
  releaseFlow: Float!
  totalCurrency: Float!
  setRate: Float!
}

type Data{
  from: String!
  to: String!
  amount: Float!
}

type Block{
  _num: Int!
  matrixID: ID!
  userID: ID!
  nounce: Int!
  data: Data!
  prev: String!
  current: String!
  verify: Boolean!
}

type CurrentTransaction{
  block: Block!
  percent: Float!
  status: Boolean!
}

type VerifyAdminResult{
  verify: Boolean!
  admin: Admin!
}

type VerifyUserResult{
  verify: Boolean!
  user: User!
}

type Query {
  users(matrixID: ID!): [User!]!
  user(_id: ID!, matrixID: ID!): User! 

  admin(_id: ID!, matrixID: ID!): Admin!
  
  Matrix(_id: ID!): Matrix!
  Matrices: [Matrix!]!
  
  #To print personal transactions
  Blocks(matrixID: ID!, userID: ID!): [Block]!
  Block(_num: Int!, matrixID: ID!, userID: ID!): Block!

  BlocksToPrint(matrixID: ID!, userID: ID!, collection: String!): [CurrentTransaction]!
  BlockChain(matrixID: ID!): [Block!]!

  verifyAdmin(matrixID: ID!, username: String!, password: String!): VerifyAdminResult!
  verifyUser(matrixID: ID!, username: String!, password: String!): VerifyUserResult!
}

type Mutation{
  createUser(matrixID:ID!, username: String!, email: String!, password: String!): User!
  updateUser(id: ID!, matrixID: ID!, username: String, email: String, password: String, current_balance: Float): User!
  deleteUser(id: ID!, matrixID: ID!): User!
  
  createAdmin(matrixID:ID!, username: String!, email: String!, password: String!): Admin!
  updateAdmin(id: ID!, matrixID:ID!, username: String, email: String, password: String): Admin!

  updateRate(id: ID!, matrixID:ID!): Admin!

  createMatrix(name: String!): Matrix! 
  deleteMatrix(id: ID!): Matrix!
  
  #To create Blocks for transactions
  createBlock(userID: ID!, matrixID:ID!, data: DataType!): Block!
  mineBlock(userID: ID!, matrixID: ID!, block: BlockType!): Boolean!
}

input DataType{
  from: String!
  to: String!
  amount: Float!
}

input BlockType{
  _num: Int!
  nounce: Int!
  data: DataType!
  prev: String!
  current: String!
  verify: Boolean!
}

scalar DatabaseLink