# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User{
  _id: ID!
  matrixID: ID!
  username: String!
  email: String!
  password: String!
  current_balance: Float!
  privateKey: String!
  publicKey: String!
}

type Matrix{
  _id: ID!
  name: String!
}

type Admin{
  _id: ID!
  matrixID: ID!
  username: String!
  email: String!
  password: String!
  privilidge: Boolean!
  releaseFlow: Float!
  totalCurrency: Float!
  setRate: Float!
}

type Data{
  from: String!
  to: String!
  amount: Float!
}

type Block{
  _num: Int!
  matrixID: ID!
  userID: ID!
  nounce: Int!
  data: Data!
  prev: String!
  current: String!
  verify: Boolean!
}

type CurrentTransaction{
  block: Block!
  percent: Float!
  status: Boolean!
}

type Query {
  users(matrixID: ID!): [User!]!
  user(_id: ID!, matrixID: ID!): User! 

  admin(_id: ID!, matrixID: ID!): Admin!
  
  Matrix(_id: ID!): Matrix!
  Matrices: [Matrix!]!
  
  #To print personal transactions
  Blocks(matrixID: ID!, userID: ID!): [Block]!
  Block(_num: Int!, matrixID: ID!, userID: ID!): Block!

  BlocksToPrint(matrixID: ID!, userID: ID!, collection: String!): [CurrentTransaction]!
  BlockChain(matrixID: ID!): [Block!]!

  verifyAdmin(_id: ID!, matrixID: ID!, username: String!, password: String!, privilidge: Boolean!): Boolean!
  verifyUser(_id: ID!, matrixID: ID!, username: String!, password: String!): Boolean!
}

type Mutation{
  createUser(matrixID:ID!, username: String!, email: String!, password: String!): User!
  updateUser(id: ID!, matrixID: ID!, username: String, email: String, password: String, current_balance: Float): User!
  deleteUser(id: ID!, matrixID: ID!): User!
  
  createPrivateKey(matrixID:matrixID!, id: ID!, publicKey: String!): User!
  
  createAdmin(matrixID:ID!, username: String!, email: String!, password: String!, privilidge: Boolean!): Admin!
  updateAdmin(id: ID!, matrixID:ID!, username: String, email: String, password: String): Admin!

  updateRate(id: ID!, matrixID:ID!): Admin!

  createMatrix(name: String!): Matrix!
  updateMatrix(id: ID!, name: String): Matrix! 
  deleteMatrix(id: ID!): Matrix!
  
  #To create Blocks for transactions
  createBlock(userID: ID!, matrixID:ID!, num: Int!, nounce: Int!, data: DataType!, current: String!): Block!
  #To update on the current transactions
  updateBlock(userID: ID!, matrixID:ID!, num: Int!, nounce: Int!, data: DataType!, prev: String!, current: String!): Block!
  #To delete a transaction
  deleteBlock(userID: ID!, matrixID:ID!, num: Int!): Block!

  mineBlock(userID: String!, matrixID: String!): Boolean!
}

input DataType{
  from: String!
  to: String!
  amount: Float!
}

scalar DatabaseLink